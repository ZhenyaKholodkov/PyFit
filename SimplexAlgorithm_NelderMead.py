'''
Template:

import sys
import PyOrigin

def FittingFunctionName():
    Page=PyOrigin.ActivePage()
    CurPageName = Page.GetName()
    workSheet=PyOrigin.WorksheetPages(CurPageName).Layers(0)
    ...

if __name__ == "__main__":
    # append path to packages
    pckPath = "C:\ProgramData\Anaconda3\envs\py33\Lib\site-packages"
    sys.path.append(pckPath)
    # end
    FunctionName()

'''

import sys
# append path to packages
pck_path = "C:\ProgramData\Anaconda3\envs\py33\Lib\site-packages"
sys.path.append(pck_path)

import numpy
from numpy import sqrt, pi, exp, linspace, loadtxt
import PyOrigin
from scipy.optimize import fmin as simplex
import matplotlib.pyplot as plt

from lmfit import  Model


# "fmin" is not a sensible name for an optimisation package.
# Rename fmin to "simplex"

# Define the objective function to be minimised by Simplex.
# params ... array holding the values of the fit parameters.
# X      ... array holding x-positions of observed data.
# Y      ... array holding y-values of observed data.
# Err    ... array holding errors of observed data.
def func(params, X, Y, Err):
    # extract current values of fit parameters from input array
    a = params[0]
    b = params[1]
    c = params[2]
    # compute chi-square
    chi2 = 0.0
    for n in range(len(X)):
        x = X[n]
        # The function y(x)=a+b*x+c*x^2 is a polynomial
        # in this example.
        y = a + b*x + c*x*x

        chi2 = chi2 + (Y[n] - y)*(Y[n] - y)/(Err[n]*Err[n])
    return chi2


def simplex_algorithm(wks):
    # Initial guess.
    x0 = [0.0, 0.0, 0.0]
    result = []

    x = wks.get_x()
    sigma = [1.0] * len(x)
    y_data = wks.get_y_data()
    for y in y_data:
        x0 = simplex(func, x0, args=(x, y, sigma), maxfun = 1000, full_output=0)
        result.append(x0)
    return result

def build_plots(_x, _y):
    '''xp = numpy.linspace(-2, 6, 100)
    z = numpy.polyfit(_x, _y, 3)
    p = numpy.poly1d(z)
    p30 = numpy.poly1d(numpy.polyfit(x, y, 30))
    _ = plt.plot(_x, _y, '.', xp, p(xp), '-', xp, p30(xp), '--')'''
    plt.plot(_x, _y)
    plt.show()

def simplex_func():
    work_sheet = PyOrigin.WorksheetPages(PyOrigin.ActivePage().GetName()).Layers(0)
    sheet_wrapper = WorkSheetWrapper(work_sheet)
    '''res_data = simplex_algorithm(sheet_wrapper)
    y =[]
    for data in res_data:
        y.append(data[0])'''
    #########################################
    '''y = [510102.98855706147, -243720144.59793743, -243631287.09644324, -243306766.19648403, -243362107.21346462, -243078034.18594503, -242992158.41612753, -242830760.27620602, -242645191.88897544, -242416571.08431518, -242265404.37169328, -242154740.74115211, -242068527.39997053, -241835948.4497087, -241937870.18970054, -241611679.71669281, -241722981.70734116, -241359649.88192984, -241041866.95365068, -240986453.39944085, -240820082.68408233, -240576508.29884213, -240673377.15617153, -240519974.3086668, -240348800.06348285, -240247983.16864881, -240190988.98566401, -239885114.87198544, -239898995.82692853, -239821273.47025228, -239560828.31414193, -239361502.50913438, -239223461.54289454, -239227637.49306935, -238970076.99228972, -238676505.40713394, -238594993.91119584, -238499082.19105431, -238395207.90591708, -238295842.33073258, -237843951.86286721, -237741287.16943705, -237509169.6342653, -237422145.27298117, -237267988.04062584, -236964307.79798824, -236737971.13832575, -236525206.08751881, -236183559.70081669, -235973046.86048424, -235716587.70936751, -235323490.00733519, -235006015.91204423, -234585788.52581763, -234266774.80185932, -233931004.28728235, -233517327.98890483, -233236372.03487492, -232936778.28897786, -232513822.74624264, -232288685.82172352, -231758970.06063616, -231436075.43235379, -231038783.1780979, -230830234.46456265, -230411519.87682098, -230106862.71758264, -229724792.37588292, -229434942.26062903, -229249850.309793, -228873391.53862834, -228558262.41434002, -228308886.13634744, -227978985.35486028, -227647185.49406779, -227454521.63335958, -227244840.12121269, -226826325.21166089, -226563995.94895464, -226346049.33670896, -225974767.08472574, -225683503.02462095, -225271177.16033131, -225059851.51944762, -224665523.08705121, -224332451.3401432, -224037838.88460982, -223839601.4997974, -223301857.08161178, -222893426.32975495, -222784326.10868639, -222370190.32620588, -221950296.09512895, -221721336.06111985, -221302483.62543106, -221100702.34776819, -220858919.79064909, -220261249.38686121, -219977633.81621537, -219456973.70870283, -219374321.13741025, -219040577.9431988, -218566371.35154587, -218334915.47940624, -217848872.70379958, -217623399.33765841, -217411960.69664186, -217061992.44812837, -216575405.28972811, -216169931.11628449, -215733983.38383791, -215361124.37096721, -215220962.81972522, -214735744.4929769, -214428832.6723569, -213890884.52922091, -213587996.46461678, -213231749.78216705, -212998047.16223156, -212729036.02881157, -212557175.98024711, -212439506.01979533, -212189994.33972162, -212044658.00899631, -212033633.15262854, -211888553.57078439, -211718971.91260797, -211286581.01713315, -210838836.3934437, -210230097.58660024, -209576831.71447736, -208716104.8066408, -207861449.62159783, -206782802.52844971, -205955838.85950065, -205024173.50008249, -204507002.78493789, -203854442.52665609, -203107511.84746262, -202732770.90779835, -202248527.44761744, -201611791.44297093, -200913693.19990087, -200527174.31369019, -199977859.94080067, -199327423.85204405, -199057878.53870282, -198226296.65455985, -197891969.67688257, -197329385.03510684, -196891883.24885121, -196160890.61856595, -195856751.17563355, -195301703.19481158, -194647613.77388149, -194231059.8231039, -193705316.67898381, -193254877.2983709, -192729670.46794444, -192132617.37856323, -191618919.16489488, -191257876.03034002, -190719793.20109823, -190202297.74571174, -189699545.94910148, -189075142.43772537, -188209473.10360754, -187521588.46305627, -186862278.32296768, -186045822.36046028, -185109900.31932887, -184280816.18202478, -183526219.61962146, -182620220.81289479, -181672375.43044257, -180943859.373941, -180071595.38296622, -179442641.31268281, -178481037.62645221, -177807165.84110644, -177063245.95166388, -176313771.96851042, -175566345.65756446, -174820589.40262252, -174153133.53184468, -173509974.28060067, -172695875.43004763, -171956062.36599103, -171433381.01240975, -170953011.84336638, -170205777.57824159, -169501909.03853941, -168502461.36275035, -167283565.90664205, -166103899.33367482, -164766038.55207372, -163640728.26190409, -162498086.12231189, -161516192.40535587, -160454079.98246673, -159450985.6463649, -158497850.91463423, -157326255.31364584, -156212263.69342828, -155243690.71685079, -154111012.81337848, -152990091.53798899, -151871942.69634482, -150736007.45067865, -149572178.18752599, -148220546.24007702, -147040896.18120226, -145718538.22969192, -144466477.41999504, -143011107.84035414, -141734307.6147674, -140349692.51167107, -138873302.50295427, -137545993.7341992, -136164821.13756931, -134875006.04112169, -133570557.7742577, -132106140.12146437, -130659032.1782231, -129227047.50418447, -127609077.2609123, -125938994.50380956, -124421729.38856447, -122924404.3194401, -121398494.94998637, -119901658.53298134, -118454309.39976406, -116858309.46502471, -115353681.72316748, -113695390.63053589, -112111986.2550866, -110555702.0997296, -108743514.72698525, -107026960.5903132, -105315180.86722934, -103534722.51419106, -101672119.03420287, -99904236.00712207, -98043003.723656952, -96192573.457897127, -94267129.74639824, -92456316.178151935, -90661034.176449105, -88640025.749254674, -86727310.037456602, -84896894.042998254, -82706852.046082094, -80725053.544704601, -78625324.801733345, -76578349.441796958, -74520159.193388626, -72535099.841724038, -70401568.844177619, -68481345.518614486, -66478037.268978998, -64638259.754134811, -62578018.018320262, -60564533.351212472, -58400039.031604819, -56190787.987405181, -54004400.640370205, -52021934.989379317, -50043441.393430486, -48071033.783042319, -46171428.099474043, -44170144.069237649, -42192111.598258391, -40282695.310069755, -38449493.501878247, -36726250.364937447, -34904739.971186787, -33105486.059440799, -31594088.568724584, -29929552.086943507, -28313914.641179696, -26873619.976715781, -25346671.418906145, -23984783.287966032, -22617391.216428541, -21269829.883310407, -19979633.185738694, -18786698.166971873, -17490689.919693399, -16373315.449509624, -15179232.711458918, -14125220.768442437, -12981089.983880289, -11943663.792583471, -10988938.036789304, -9930670.8807505555, -9009928.7710802108, -8047456.1633655559, -7153269.9694126099, -6296856.7112428676, -5486421.0506518241, -4742348.519224151]
    x = sheet_wrapper.get_x_from_comments()
    print(len(sheet_wrapper.get_x_from_comments()))
    print(len(y))'''
    ##########################################
    #build_plots(sheet_wrapper.get_x_from_comments(), y)

    x = sheet_wrapper.get_x()
    y_data = sheet_wrapper.get_y_data()
    for y in y_data:
        gaussian_algorithm(x, y)